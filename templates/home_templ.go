// Code generated by templ@v0.2.315 DO NOT EDIT.

package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

func Home(mode string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<!doctype html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>")
		if err != nil {
			return err
		}
		var_2 := `Document`
		_, err = templBuffer.WriteString(var_2)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</title><link rel=\"stylesheet\" href=\"/static/assets/vendor/@fortawesome/fontawesome-free/css/all.min.css\"><link rel=\"stylesheet\" href=\"/static/main.css\"></head><body class=\"text-slate-700 antialiased 100vh\"><div class=\"100vh\" id=\"app\"></div></body>")
		if err != nil {
			return err
		}
		if mode == "dev" {
			_, err = templBuffer.WriteString("<script defer src=\"//localhost:8000/main.js\">")
			if err != nil {
				return err
			}
			var_3 := ``
			_, err = templBuffer.WriteString(var_3)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</script> <script>")
			if err != nil {
				return err
			}
			var_4 := `
            new EventSource('http://localhost:8000/esbuild').addEventListener('change', () => location.reload())
        `
			_, err = templBuffer.WriteString(var_4)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</script>")
			if err != nil {
				return err
			}
		} else {
			_, err = templBuffer.WriteString("<script defer src=\"/static/main.js\">")
			if err != nil {
				return err
			}
			var_5 := ``
			_, err = templBuffer.WriteString(var_5)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</script>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</html>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}
